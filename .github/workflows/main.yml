name: Pipeline CI
run-name: Pipeline CI executada por ${{ github.actor }}

on:
  workflow_dispatch:

jobs:
  Microservicos:
    name: Teste de integração dos microserviços
    runs-on: ubuntu-latest

    steps:
      # Checkout do repositório
      - name: Checagem do repositório
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Instalação do Docker Compose, PostgreSQL Client e Netcat
      - name: Instalação do Docker Compose e PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y docker-compose postgresql-client netcat-openbsd

      # Subir app-orders (com DB interno)
      - name: Subir app-orders
        working-directory: app-orders
        run: docker-compose up -d --build

      # Subir app-invoices (com DB interno)
      - name: Subir app-invoices
        working-directory: app-invoices
        run: docker-compose up -d --build

      # Subir mensageria (RabbitMQ), observabilidade (Jaeger) e API Gateway (Kong)
      - name: Subir serviços de mensageria e observabilidade
        run: docker-compose -f docker-compose.yml up -d --build

      # Aguardando serviços de infraestrutura
      - name: Aguardando serviços de infraestrutura
        run: |
          echo "Esperando RabbitMQ iniciar..."
          until nc -z localhost 5672; do sleep 2; done
          echo "Esperando Kong iniciar..."
          until nc -z localhost 8000; do sleep 2; done
          echo "Esperando Jaeger iniciar..."
          until nc -z localhost 16686; do sleep 2; done
          echo "Infraestrutura pronta!"

      # Executar migrations do app-orders
      - name: Executar migrations app-orders
        working-directory: app-orders
        run: |
          docker-compose run --rm --entrypoint "" \
            -e DATABASE_URL="postgresql://docker:docker@pg:5432/orders" \
            app-orders sh -c "npm exec -- drizzle-kit generate && npm exec -- drizzle-kit migrate"

      # Healthcheck do app-orders via Kong
      - name: Aguardando app-orders pronto
        run: |
          echo "Aguardando app-orders responder via Kong..."
          until curl -s -f http://localhost:8000/orders > /dev/null; do
            echo "Ainda não disponível... tentando novamente em 5s"
            sleep 5
          done
          echo "app-orders pronto!"

      # Testes de endpoints do app-orders via Kong
      - name: Teste de endpoints app-orders
        run: |
          for i in {1..8}; do
            curl -s -X POST http://localhost:8000/orders \
              -H "Content-Type: application/json" \
              -d '{"amount": 4}' || exit 1
          done

      # Healthcheck do app-invoices via Kong
      - name: Aguardando app-invoices pronto
        run: |
          echo "Aguardando app-invoices responder via Kong..."
          until curl -s -f http://localhost:8000/invoices > /dev/null; do
            echo "Ainda não disponível... tentando novamente em 5s"
            sleep 5
          done
          echo "app-invoices pronto!"

      # Testes de endpoints do app-invoices via Kong
      - name: Teste de endpoints app-invoices
        run: |
          curl -s -X GET http://localhost:8000/invoices || exit 1

      # Limpar containers
      - name: Stop dos serviços docker-compose
        run: docker-compose down
