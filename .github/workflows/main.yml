name: Pipeline CI
run-name: Pipeline CI executada por ${{ github.actor }}

on:
  workflow_dispatch:

jobs:
  Microservicos:
    runs-on: ubuntu-latest

    steps:
      # Checkout do repositório
      - name: Checagem do repositório
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Instalação do Docker Compose e cliente PostgreSQL
      - name: Instalação do Docker Compose e PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y docker-compose postgresql-client

      # Subir serviços base (RabbitMQ, Kong, Jaeger)
      - name: Build e Start do docker-compose
        run: docker-compose up -d --build

      # Aguardando inicialização dos serviços de mensageria, API-Gateway e logs
      - name: Aguardando serviços base
        run: |
          echo "Esperando RabbitMQ iniciar..."
          until nc -z localhost 5672; do sleep 2; done
          echo "Esperando Kong iniciar..."
          until nc -z localhost 8001; do sleep 2; done
          echo "Esperando Jaeger iniciar..."
          sleep 5

      # Criação dos bancos de dados
      - name: Criar banco app-orders
        run: |
          psql postgresql://docker:docker@localhost:5482/postgres -c "CREATE DATABASE orders;" || echo "Banco orders já existe"
      - name: Criar banco app-invoices
        run: |
          psql postgresql://docker:docker@localhost:5483/postgres -c "CREATE DATABASE invoices;" || echo "Banco invoices já existe"

      # Build da imagem app-orders
      - name: Build app-orders
        working-directory: app-orders
        run: docker build -t app-orders .

      # Rodar migrations do app-orders
      - name: Rodar migrations app-orders
        working-directory: app-orders
        run: |
          docker run --rm \
            -e DATABASE_URL="postgresql://docker:docker@localhost:5482/orders" \
            -e OTEL_SERVICE_NAME="app-orders" \
            --entrypoint sh \
            app-orders -c "npx drizzle-kit generate && npx drizzle-kit migrate"

      # Build da imagem app-invoices
      - name: Build app-invoices
        working-directory: app-invoices
        run: docker build -t app-invoices .

      # Rodar migrations do app-invoices
      - name: Rodar migrations app-invoices
        working-directory: app-invoices
        run: |
          docker run --rm \
            -e DATABASE_URL="postgresql://docker:docker@localhost:5483/invoices" \
            -e OTEL_SERVICE_NAME="app-invoices" \
            --entrypoint sh \
            app-invoices -c "npx drizzle-kit generate && npx drizzle-kit migrate"

      # Rodar servidor app-orders e testar endpoint
      - name: Execução do servidor app-orders
        working-directory: app-orders
        run: |
          npx tsc
          node ./dist/src/server.js &  # roda em background
          SERVER_PID=$!
          sleep 5
          for i in {1..8}; do
            curl -s -X POST http://localhost:3000 \
              -H "Content-Type: application/json" \
              -d '{"amount": 4}' || exit 1
          done
          kill $SERVER_PID

      # Limpar containers
      - name: Stop do serviço do docker-compose
        run: docker-compose down